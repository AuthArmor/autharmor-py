# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictInt, StrictStr

from typing import Optional

from autharmor_python.models.credential import Credential
from autharmor_python.models.finish_add_webauthn_to_user_request import FinishAddWebauthnToUserRequest
from autharmor_python.models.finish_add_webauthn_to_user_response import FinishAddWebauthnToUserResponse
from autharmor_python.models.finish_new_webauthn_user_registration_request import FinishNewWebauthnUserRegistrationRequest
from autharmor_python.models.finish_new_webauthn_user_registration_response import FinishNewWebauthnUserRegistrationResponse
from autharmor_python.models.finish_webauthn_auth_request import FinishWebauthnAuthRequest
from autharmor_python.models.finish_webauthn_auth_response import FinishWebauthnAuthResponse
from autharmor_python.models.get_auth_request_response import GetAuthRequestResponse
from autharmor_python.models.get_registration_info_response import GetRegistrationInfoResponse
from autharmor_python.models.get_user_auth_history_response import GetUserAuthHistoryResponse
from autharmor_python.models.get_user_credentials_response import GetUserCredentialsResponse
from autharmor_python.models.get_user_response import GetUserResponse
from autharmor_python.models.get_users_response import GetUsersResponse
from autharmor_python.models.start_add_webauthn_to_user_request import StartAddWebauthnToUserRequest
from autharmor_python.models.start_add_webauthn_to_user_response import StartAddWebauthnToUserResponse
from autharmor_python.models.start_autharmor_autenticator_registration_new_user_request import StartAutharmorAutenticatorRegistrationNewUserRequest
from autharmor_python.models.start_autharmor_authenticator_registration_for_user_response import StartAutharmorAuthenticatorRegistrationForUserResponse
from autharmor_python.models.start_autharmor_authenticator_registration_new_user_response import StartAutharmorAuthenticatorRegistrationNewUserResponse
from autharmor_python.models.start_authenticator_auth_request import StartAuthenticatorAuthRequest
from autharmor_python.models.start_authenticator_auth_response import StartAuthenticatorAuthResponse
from autharmor_python.models.start_change_magiclink_email_registration_request import StartChangeMagiclinkEmailRegistrationRequest
from autharmor_python.models.start_change_magiclink_email_registration_response import StartChangeMagiclinkEmailRegistrationResponse
from autharmor_python.models.start_magiclink_email_auth_request import StartMagiclinkEmailAuthRequest
from autharmor_python.models.start_magiclink_email_auth_response import StartMagiclinkEmailAuthResponse
from autharmor_python.models.start_magiclink_email_registration_request import StartMagiclinkEmailRegistrationRequest
from autharmor_python.models.start_magiclink_email_registration_response import StartMagiclinkEmailRegistrationResponse
from autharmor_python.models.start_new_webauthn_user_registration_request import StartNewWebauthnUserRegistrationRequest
from autharmor_python.models.start_new_webauthn_user_registration_response import StartNewWebauthnUserRegistrationResponse
from autharmor_python.models.start_webauthn_auth_request import StartWebauthnAuthRequest
from autharmor_python.models.start_webauthn_auth_response import StartWebauthnAuthResponse
from autharmor_python.models.update_user_request import UpdateUserRequest
from autharmor_python.models.user import User
from autharmor_python.models.validate_auth_response import ValidateAuthResponse
from autharmor_python.models.validate_autharmor_autenticator_registration_request import ValidateAutharmorAutenticatorRegistrationRequest
from autharmor_python.models.validate_autharmor_autenticator_registration_response import ValidateAutharmorAutenticatorRegistrationResponse
from autharmor_python.models.validate_autharmor_authenticator_auth_request import ValidateAutharmorAuthenticatorAuthRequest
from autharmor_python.models.validate_magiclink_email_auth_request import ValidateMagiclinkEmailAuthRequest
from autharmor_python.models.validate_magiclink_email_registration_request import ValidateMagiclinkEmailRegistrationRequest
from autharmor_python.models.validate_magiclink_email_registration_response import ValidateMagiclinkEmailRegistrationResponse
from autharmor_python.models.validate_webauthn_auth_request import ValidateWebauthnAuthRequest
from autharmor_python.models.validate_webauthn_registration_request import ValidateWebauthnRegistrationRequest
from autharmor_python.models.validate_webauthn_registration_response import ValidateWebauthnRegistrationResponse

from autharmor_python.api_client import ApiClient
from autharmor_python.api_response import ApiResponse
from autharmor_python.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AutharmorApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v4_auth_auth_request_id_get(self, auth_request_id : StrictStr, **kwargs) -> GetAuthRequestResponse:  # noqa: E501
        """  Get Auth Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_auth_request_id_get(auth_request_id, async_req=True)
        >>> result = thread.get()

        :param auth_request_id: (required)
        :type auth_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetAuthRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_auth_request_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_auth_request_id_get_with_http_info(auth_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_auth_request_id_get_with_http_info(self, auth_request_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Auth Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_auth_request_id_get_with_http_info(auth_request_id, async_req=True)
        >>> result = thread.get()

        :param auth_request_id: (required)
        :type auth_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetAuthRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'auth_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_auth_request_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['auth_request_id']:
            _path_params['auth_request_id'] = _params['auth_request_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetAuthRequestResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/{auth_request_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_authenticator_start_post(self, start_authenticator_auth_request : Optional[StartAuthenticatorAuthRequest] = None, **kwargs) -> StartAuthenticatorAuthResponse:  # noqa: E501
        """  Start auth request using Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_authenticator_start_post(start_authenticator_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_authenticator_auth_request:
        :type start_authenticator_auth_request: StartAuthenticatorAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartAuthenticatorAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_authenticator_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_authenticator_start_post_with_http_info(start_authenticator_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_authenticator_start_post_with_http_info(self, start_authenticator_auth_request : Optional[StartAuthenticatorAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start auth request using Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_authenticator_start_post_with_http_info(start_authenticator_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_authenticator_auth_request:
        :type start_authenticator_auth_request: StartAuthenticatorAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartAuthenticatorAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_authenticator_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_authenticator_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_authenticator_auth_request'] is not None:
            _body_params = _params['start_authenticator_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartAuthenticatorAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/authenticator/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_authenticator_validate_post(self, validate_autharmor_authenticator_auth_request : Optional[ValidateAutharmorAuthenticatorAuthRequest] = None, **kwargs) -> ValidateAuthResponse:  # noqa: E501
        """ Validate auth request for Auth Armor Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_authenticator_validate_post(validate_autharmor_authenticator_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_autharmor_authenticator_auth_request:
        :type validate_autharmor_authenticator_auth_request: ValidateAutharmorAuthenticatorAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_authenticator_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_authenticator_validate_post_with_http_info(validate_autharmor_authenticator_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_authenticator_validate_post_with_http_info(self, validate_autharmor_authenticator_auth_request : Optional[ValidateAutharmorAuthenticatorAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ Validate auth request for Auth Armor Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_authenticator_validate_post_with_http_info(validate_autharmor_authenticator_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_autharmor_authenticator_auth_request:
        :type validate_autharmor_authenticator_auth_request: ValidateAutharmorAuthenticatorAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'validate_autharmor_authenticator_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_authenticator_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_autharmor_authenticator_auth_request'] is not None:
            _body_params = _params['validate_autharmor_authenticator_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/authenticator/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_magiclink_email_start_post(self, start_magiclink_email_auth_request : Optional[StartMagiclinkEmailAuthRequest] = None, **kwargs) -> StartMagiclinkEmailAuthResponse:  # noqa: E501
        """  Start auth request using Maigclink Email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_magiclink_email_start_post(start_magiclink_email_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_magiclink_email_auth_request:
        :type start_magiclink_email_auth_request: StartMagiclinkEmailAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartMagiclinkEmailAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_magiclink_email_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_magiclink_email_start_post_with_http_info(start_magiclink_email_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_magiclink_email_start_post_with_http_info(self, start_magiclink_email_auth_request : Optional[StartMagiclinkEmailAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start auth request using Maigclink Email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_magiclink_email_start_post_with_http_info(start_magiclink_email_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_magiclink_email_auth_request:
        :type start_magiclink_email_auth_request: StartMagiclinkEmailAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartMagiclinkEmailAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_magiclink_email_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_magiclink_email_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_magiclink_email_auth_request'] is not None:
            _body_params = _params['start_magiclink_email_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartMagiclinkEmailAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/magiclink_email/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_magiclink_email_validate_post(self, validate_magiclink_email_auth_request : Optional[ValidateMagiclinkEmailAuthRequest] = None, **kwargs) -> ValidateAuthResponse:  # noqa: E501
        """  Validate auth request for Magiclink Email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_magiclink_email_validate_post(validate_magiclink_email_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_magiclink_email_auth_request:
        :type validate_magiclink_email_auth_request: ValidateMagiclinkEmailAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_magiclink_email_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_magiclink_email_validate_post_with_http_info(validate_magiclink_email_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_magiclink_email_validate_post_with_http_info(self, validate_magiclink_email_auth_request : Optional[ValidateMagiclinkEmailAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate auth request for Magiclink Email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_magiclink_email_validate_post_with_http_info(validate_magiclink_email_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_magiclink_email_auth_request:
        :type validate_magiclink_email_auth_request: ValidateMagiclinkEmailAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'validate_magiclink_email_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_magiclink_email_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_magiclink_email_auth_request'] is not None:
            _body_params = _params['validate_magiclink_email_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/magiclink_email/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_webauthn_finish_post(self, finish_webauthn_auth_request : Optional[FinishWebauthnAuthRequest] = None, **kwargs) -> FinishWebauthnAuthResponse:  # noqa: E501
        """  Finish auth request using WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_finish_post(finish_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param finish_webauthn_auth_request:
        :type finish_webauthn_auth_request: FinishWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FinishWebauthnAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_webauthn_finish_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_webauthn_finish_post_with_http_info(finish_webauthn_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_webauthn_finish_post_with_http_info(self, finish_webauthn_auth_request : Optional[FinishWebauthnAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Finish auth request using WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_finish_post_with_http_info(finish_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param finish_webauthn_auth_request:
        :type finish_webauthn_auth_request: FinishWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FinishWebauthnAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'finish_webauthn_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_webauthn_finish_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['finish_webauthn_auth_request'] is not None:
            _body_params = _params['finish_webauthn_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "FinishWebauthnAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/webauthn/finish', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_webauthn_start_post(self, start_webauthn_auth_request : Optional[StartWebauthnAuthRequest] = None, **kwargs) -> StartWebauthnAuthResponse:  # noqa: E501
        """ Start auth request using Webauthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_start_post(start_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_webauthn_auth_request:
        :type start_webauthn_auth_request: StartWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartWebauthnAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_webauthn_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_webauthn_start_post_with_http_info(start_webauthn_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_webauthn_start_post_with_http_info(self, start_webauthn_auth_request : Optional[StartWebauthnAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ Start auth request using Webauthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_start_post_with_http_info(start_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param start_webauthn_auth_request:
        :type start_webauthn_auth_request: StartWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartWebauthnAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_webauthn_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_webauthn_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_webauthn_auth_request'] is not None:
            _body_params = _params['start_webauthn_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartWebauthnAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/webauthn/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_auth_webauthn_validate_post(self, validate_webauthn_auth_request : Optional[ValidateWebauthnAuthRequest] = None, **kwargs) -> ValidateAuthResponse:  # noqa: E501
        """  Validate auth request for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_validate_post(validate_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_webauthn_auth_request:
        :type validate_webauthn_auth_request: ValidateWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateAuthResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_auth_webauthn_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_auth_webauthn_validate_post_with_http_info(validate_webauthn_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_auth_webauthn_validate_post_with_http_info(self, validate_webauthn_auth_request : Optional[ValidateWebauthnAuthRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate auth request for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_auth_webauthn_validate_post_with_http_info(validate_webauthn_auth_request, async_req=True)
        >>> result = thread.get()

        :param validate_webauthn_auth_request:
        :type validate_webauthn_auth_request: ValidateWebauthnAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateAuthResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'validate_webauthn_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_auth_webauthn_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_webauthn_auth_request'] is not None:
            _body_params = _params['validate_webauthn_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateAuthResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/auth/webauthn/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_get(self, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUsersResponse:  # noqa: E501
        """  Get Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_get(username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUsersResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_get_with_http_info(username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_get_with_http_info(self, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_get_with_http_info(username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUsersResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUsersResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_authenticator_registration_id_validate_post(self, registration_id : StrictStr, validate_autharmor_autenticator_registration_request : Optional[ValidateAutharmorAutenticatorRegistrationRequest] = None, **kwargs) -> ValidateAutharmorAutenticatorRegistrationResponse:  # noqa: E501
        """  Validate User Registration for Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_authenticator_registration_id_validate_post(registration_id, validate_autharmor_autenticator_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_autharmor_autenticator_registration_request:
        :type validate_autharmor_autenticator_registration_request: ValidateAutharmorAutenticatorRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateAutharmorAutenticatorRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_authenticator_registration_id_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_authenticator_registration_id_validate_post_with_http_info(registration_id, validate_autharmor_autenticator_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_authenticator_registration_id_validate_post_with_http_info(self, registration_id : StrictStr, validate_autharmor_autenticator_registration_request : Optional[ValidateAutharmorAutenticatorRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate User Registration for Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_authenticator_registration_id_validate_post_with_http_info(registration_id, validate_autharmor_autenticator_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_autharmor_autenticator_registration_request:
        :type validate_autharmor_autenticator_registration_request: ValidateAutharmorAutenticatorRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateAutharmorAutenticatorRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'validate_autharmor_autenticator_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_authenticator_registration_id_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_autharmor_autenticator_registration_request'] is not None:
            _body_params = _params['validate_autharmor_autenticator_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateAutharmorAutenticatorRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/authenticator/{registration_id}/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_authenticator_start_post(self, start_autharmor_autenticator_registration_new_user_request : Optional[StartAutharmorAutenticatorRegistrationNewUserRequest] = None, **kwargs) -> StartAutharmorAuthenticatorRegistrationNewUserResponse:  # noqa: E501
        """  Start User Registration for Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_authenticator_start_post(start_autharmor_autenticator_registration_new_user_request, async_req=True)
        >>> result = thread.get()

        :param start_autharmor_autenticator_registration_new_user_request:
        :type start_autharmor_autenticator_registration_new_user_request: StartAutharmorAutenticatorRegistrationNewUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartAutharmorAuthenticatorRegistrationNewUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_authenticator_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_authenticator_start_post_with_http_info(start_autharmor_autenticator_registration_new_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_authenticator_start_post_with_http_info(self, start_autharmor_autenticator_registration_new_user_request : Optional[StartAutharmorAutenticatorRegistrationNewUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start User Registration for Authenticator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_authenticator_start_post_with_http_info(start_autharmor_autenticator_registration_new_user_request, async_req=True)
        >>> result = thread.get()

        :param start_autharmor_autenticator_registration_new_user_request:
        :type start_autharmor_autenticator_registration_new_user_request: StartAutharmorAutenticatorRegistrationNewUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartAutharmorAuthenticatorRegistrationNewUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_autharmor_autenticator_registration_new_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_authenticator_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_autharmor_autenticator_registration_new_user_request'] is not None:
            _body_params = _params['start_autharmor_autenticator_registration_new_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartAutharmorAuthenticatorRegistrationNewUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/authenticator/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_magiclink_email_registration_id_validate_post(self, registration_id : StrictStr, validate_magiclink_email_registration_request : Optional[ValidateMagiclinkEmailRegistrationRequest] = None, **kwargs) -> ValidateMagiclinkEmailRegistrationResponse:  # noqa: E501
        """  Validate MagicLink Registration Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_magiclink_email_registration_id_validate_post(registration_id, validate_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_magiclink_email_registration_request:
        :type validate_magiclink_email_registration_request: ValidateMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateMagiclinkEmailRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_magiclink_email_registration_id_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_magiclink_email_registration_id_validate_post_with_http_info(registration_id, validate_magiclink_email_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_magiclink_email_registration_id_validate_post_with_http_info(self, registration_id : StrictStr, validate_magiclink_email_registration_request : Optional[ValidateMagiclinkEmailRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate MagicLink Registration Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_magiclink_email_registration_id_validate_post_with_http_info(registration_id, validate_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_magiclink_email_registration_request:
        :type validate_magiclink_email_registration_request: ValidateMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateMagiclinkEmailRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'validate_magiclink_email_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_magiclink_email_registration_id_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_magiclink_email_registration_request'] is not None:
            _body_params = _params['validate_magiclink_email_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateMagiclinkEmailRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/magiclink_email/{registration_id}/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_magiclink_email_start_post(self, start_magiclink_email_registration_request : Optional[StartMagiclinkEmailRegistrationRequest] = None, **kwargs) -> StartMagiclinkEmailRegistrationResponse:  # noqa: E501
        """  Start User Registration for MagicLink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_magiclink_email_start_post(start_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_magiclink_email_registration_request:
        :type start_magiclink_email_registration_request: StartMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartMagiclinkEmailRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_magiclink_email_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_magiclink_email_start_post_with_http_info(start_magiclink_email_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_magiclink_email_start_post_with_http_info(self, start_magiclink_email_registration_request : Optional[StartMagiclinkEmailRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start User Registration for MagicLink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_magiclink_email_start_post_with_http_info(start_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_magiclink_email_registration_request:
        :type start_magiclink_email_registration_request: StartMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartMagiclinkEmailRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_magiclink_email_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_magiclink_email_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_magiclink_email_registration_request'] is not None:
            _body_params = _params['start_magiclink_email_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartMagiclinkEmailRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/magiclink_email/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_registration_id_get(self, registration_id : StrictStr, **kwargs) -> GetRegistrationInfoResponse:  # noqa: E501
        """  Get Registration Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_registration_id_get(registration_id, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetRegistrationInfoResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_registration_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_registration_id_get_with_http_info(registration_id, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_registration_id_get_with_http_info(self, registration_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Registration Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_registration_id_get_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetRegistrationInfoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_registration_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_Id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetRegistrationInfoResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/{registration_Id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_finish_post(self, registration_id : StrictStr, finish_new_webauthn_user_registration_request : Optional[FinishNewWebauthnUserRegistrationRequest] = None, **kwargs) -> FinishNewWebauthnUserRegistrationResponse:  # noqa: E501
        """  Finish WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_finish_post(registration_id, finish_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param finish_new_webauthn_user_registration_request:
        :type finish_new_webauthn_user_registration_request: FinishNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FinishNewWebauthnUserRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_registration_id_finish_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(registration_id, finish_new_webauthn_user_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(self, registration_id : StrictStr, finish_new_webauthn_user_registration_request : Optional[FinishNewWebauthnUserRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Finish WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(registration_id, finish_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param finish_new_webauthn_user_registration_request:
        :type finish_new_webauthn_user_registration_request: FinishNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FinishNewWebauthnUserRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'finish_new_webauthn_user_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_registration_id_finish_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['finish_new_webauthn_user_registration_request'] is not None:
            _body_params = _params['finish_new_webauthn_user_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "FinishNewWebauthnUserRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/{registration_id}/finish', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_validate_post(self, registration_id : StrictStr, validate_webauthn_registration_request : Optional[ValidateWebauthnRegistrationRequest] = None, **kwargs) -> ValidateWebauthnRegistrationResponse:  # noqa: E501
        """  Validate User Registration for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_validate_post(registration_id, validate_webauthn_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_webauthn_registration_request:
        :type validate_webauthn_registration_request: ValidateWebauthnRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateWebauthnRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_registration_id_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(registration_id, validate_webauthn_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(self, registration_id : StrictStr, validate_webauthn_registration_request : Optional[ValidateWebauthnRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate User Registration for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(registration_id, validate_webauthn_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_webauthn_registration_request:
        :type validate_webauthn_registration_request: ValidateWebauthnRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateWebauthnRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'validate_webauthn_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_registration_id_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_webauthn_registration_request'] is not None:
            _body_params = _params['validate_webauthn_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateWebauthnRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/{registration_id}/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_webauthn_start_post(self, start_new_webauthn_user_registration_request : Optional[StartNewWebauthnUserRegistrationRequest] = None, **kwargs) -> StartNewWebauthnUserRegistrationResponse:  # noqa: E501
        """  Start WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_start_post(start_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_new_webauthn_user_registration_request:
        :type start_new_webauthn_user_registration_request: StartNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartNewWebauthnUserRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_start_post_with_http_info(start_new_webauthn_user_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_start_post_with_http_info(self, start_new_webauthn_user_registration_request : Optional[StartNewWebauthnUserRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_start_post_with_http_info(start_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_new_webauthn_user_registration_request:
        :type start_new_webauthn_user_registration_request: StartNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartNewWebauthnUserRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_new_webauthn_user_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_new_webauthn_user_registration_request'] is not None:
            _body_params = _params['start_new_webauthn_user_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartNewWebauthnUserRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_auth_history_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUserAuthHistoryResponse:  # noqa: E501
        """  Get Auth History for User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_auth_history_get(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserAuthHistoryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_auth_history_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_auth_history_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_auth_history_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Auth History for User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_auth_history_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserAuthHistoryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_auth_history_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserAuthHistoryResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/auth_history', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_authenticator_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUserCredentialsResponse:  # noqa: E501
        """  Get Users Authenticator Credential list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_authenticator_get(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_authenticator_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_authenticator_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_authenticator_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users Authenticator Credential list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_authenticator_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_authenticator_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserCredentialsResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials/authenticator', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_credential_id_disable_post(self, user_id : StrictStr, credential_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> Credential:  # noqa: E501
        """  Disable Users Credential by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_credential_id_disable_post(user_id, credential_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param credential_id: (required)
        :type credential_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Credential
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_credential_id_disable_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_credential_id_disable_post_with_http_info(user_id, credential_id, username, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_credential_id_disable_post_with_http_info(self, user_id : StrictStr, credential_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Disable Users Credential by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_credential_id_disable_post_with_http_info(user_id, credential_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param credential_id: (required)
        :type credential_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Credential, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'credential_id',
            'username'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_credential_id_disable_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['credential_id']:
            _path_params['credential_id'] = _params['credential_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "Credential",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials/{credential_id}/disable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_credential_id_get(self, user_id : StrictStr, credential_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> Credential:  # noqa: E501
        """  Get Users Credential by Credential ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_credential_id_get(user_id, credential_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param credential_id: (required)
        :type credential_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Credential
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_credential_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_credential_id_get_with_http_info(user_id, credential_id, username, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_credential_id_get_with_http_info(self, user_id : StrictStr, credential_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users Credential by Credential ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_credential_id_get_with_http_info(user_id, credential_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param credential_id: (required)
        :type credential_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Credential, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'credential_id',
            'username'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_credential_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['credential_id']:
            _path_params['credential_id'] = _params['credential_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "Credential",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials/{credential_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUserCredentialsResponse:  # noqa: E501
        """  Get Users Credentials list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_get(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users Credentials list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserCredentialsResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_magiclink_email_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUserCredentialsResponse:  # noqa: E501
        """  Get Users Authenticator Credential list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_magiclink_email_get(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_magiclink_email_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_magiclink_email_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_magiclink_email_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users Authenticator Credential list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_magiclink_email_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_magiclink_email_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserCredentialsResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials/magiclink_email', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_credentials_webauthn_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> GetUserCredentialsResponse:  # noqa: E501
        """  Get Users WebAuthn Device list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_webauthn_get(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_credentials_webauthn_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_credentials_webauthn_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_credentials_webauthn_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, page_number : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, sort_direction : Optional[StrictStr] = None, sort_column : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get Users WebAuthn Device list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_credentials_webauthn_get_with_http_info(user_id, username, page_number, page_size, sort_direction, sort_column, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param sort_direction:
        :type sort_direction: str
        :param sort_column:
        :type sort_column: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'page_number',
            'page_size',
            'sort_direction',
            'sort_column'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_credentials_webauthn_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('page_number', _params['page_number']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sort_direction', _params['sort_direction']))

        if _params.get('sort_column') is not None:  # noqa: E501
            _query_params.append(('sort_column', _params['sort_column']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserCredentialsResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/credentials/webauthn', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_get(self, user_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> GetUserResponse:  # noqa: E501
        """  Get User By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_get(user_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_get_with_http_info(user_id, username, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_get_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Get User By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_get_with_http_info(user_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "GetUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_magiclink_email_update_start_post(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_change_magiclink_email_registration_request : Optional[StartChangeMagiclinkEmailRegistrationRequest] = None, **kwargs) -> StartChangeMagiclinkEmailRegistrationResponse:  # noqa: E501
        """  Start Change Users Email Address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_magiclink_email_update_start_post(user_id, username, start_change_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_change_magiclink_email_registration_request:
        :type start_change_magiclink_email_registration_request: StartChangeMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartChangeMagiclinkEmailRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_magiclink_email_update_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_magiclink_email_update_start_post_with_http_info(user_id, username, start_change_magiclink_email_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_magiclink_email_update_start_post_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_change_magiclink_email_registration_request : Optional[StartChangeMagiclinkEmailRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start Change Users Email Address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_magiclink_email_update_start_post_with_http_info(user_id, username, start_change_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_change_magiclink_email_registration_request:
        :type start_change_magiclink_email_registration_request: StartChangeMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartChangeMagiclinkEmailRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'start_change_magiclink_email_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_magiclink_email_update_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_change_magiclink_email_registration_request'] is not None:
            _body_params = _params['start_change_magiclink_email_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartChangeMagiclinkEmailRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/magiclink_email/update/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_put(self, user_id : StrictStr, username : Optional[StrictStr] = None, update_user_request : Optional[UpdateUserRequest] = None, **kwargs) -> User:  # noqa: E501
        """  Update User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_put(user_id, username, update_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param update_user_request:
        :type update_user_request: UpdateUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: User
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_put_with_http_info(user_id, username, update_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_put_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, update_user_request : Optional[UpdateUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Update User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_put_with_http_info(user_id, username, update_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param update_user_request:
        :type update_user_request: UpdateUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(User, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'update_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_user_request'] is not None:
            _body_params = _params['update_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "User",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_authenticator_start_post(self, user_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> StartAutharmorAuthenticatorRegistrationForUserResponse:  # noqa: E501
        """  Start Authenticator Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_authenticator_start_post(user_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartAutharmorAuthenticatorRegistrationForUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_authenticator_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_authenticator_start_post_with_http_info(user_id, username, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_authenticator_start_post_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start Authenticator Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_authenticator_start_post_with_http_info(user_id, username, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartAutharmorAuthenticatorRegistrationForUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_authenticator_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartAutharmorAuthenticatorRegistrationForUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/authenticator/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_magiclink_email_start_post(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_magiclink_email_registration_request : Optional[StartMagiclinkEmailRegistrationRequest] = None, **kwargs) -> StartMagiclinkEmailRegistrationResponse:  # noqa: E501
        """  Create Magiclink Email Record for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_magiclink_email_start_post(user_id, username, start_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_magiclink_email_registration_request:
        :type start_magiclink_email_registration_request: StartMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartMagiclinkEmailRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_magiclink_email_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_magiclink_email_start_post_with_http_info(user_id, username, start_magiclink_email_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_magiclink_email_start_post_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_magiclink_email_registration_request : Optional[StartMagiclinkEmailRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Create Magiclink Email Record for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_magiclink_email_start_post_with_http_info(user_id, username, start_magiclink_email_registration_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_magiclink_email_registration_request:
        :type start_magiclink_email_registration_request: StartMagiclinkEmailRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartMagiclinkEmailRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'start_magiclink_email_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_magiclink_email_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_magiclink_email_registration_request'] is not None:
            _body_params = _params['start_magiclink_email_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartMagiclinkEmailRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/magiclink_email/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_registration_id_finish_post(self, user_id : StrictStr, registration_id : StrictStr, username : Optional[StrictStr] = None, finish_add_webauthn_to_user_request : Optional[FinishAddWebauthnToUserRequest] = None, **kwargs) -> FinishAddWebauthnToUserResponse:  # noqa: E501
        """  Finish WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_registration_id_finish_post(user_id, registration_id, username, finish_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param registration_id: (required)
        :type registration_id: str
        :param username:
        :type username: str
        :param finish_add_webauthn_to_user_request:
        :type finish_add_webauthn_to_user_request: FinishAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FinishAddWebauthnToUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(user_id, registration_id, username, finish_add_webauthn_to_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(self, user_id : StrictStr, registration_id : StrictStr, username : Optional[StrictStr] = None, finish_add_webauthn_to_user_request : Optional[FinishAddWebauthnToUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Finish WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(user_id, registration_id, username, finish_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param registration_id: (required)
        :type registration_id: str
        :param username:
        :type username: str
        :param finish_add_webauthn_to_user_request:
        :type finish_add_webauthn_to_user_request: FinishAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FinishAddWebauthnToUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'registration_id',
            'username',
            'finish_add_webauthn_to_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_webauthn_registration_id_finish_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['finish_add_webauthn_to_user_request'] is not None:
            _body_params = _params['finish_add_webauthn_to_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "FinishAddWebauthnToUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/webauthn/{registration_id}/finish', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_start_post(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_add_webauthn_to_user_request : Optional[StartAddWebauthnToUserRequest] = None, **kwargs) -> StartAddWebauthnToUserResponse:  # noqa: E501
        """  Start WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_start_post(user_id, username, start_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_add_webauthn_to_user_request:
        :type start_add_webauthn_to_user_request: StartAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartAddWebauthnToUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_webauthn_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_webauthn_start_post_with_http_info(user_id, username, start_add_webauthn_to_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_start_post_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_add_webauthn_to_user_request : Optional[StartAddWebauthnToUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_start_post_with_http_info(user_id, username, start_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_add_webauthn_to_user_request:
        :type start_add_webauthn_to_user_request: StartAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartAddWebauthnToUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'start_add_webauthn_to_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_webauthn_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_add_webauthn_to_user_request'] is not None:
            _body_params = _params['start_add_webauthn_to_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartAddWebauthnToUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/webauthn/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
