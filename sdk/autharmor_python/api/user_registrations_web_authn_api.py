# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictStr

from typing import Optional

from autharmor_python.models.finish_add_webauthn_to_user_request import FinishAddWebauthnToUserRequest
from autharmor_python.models.finish_add_webauthn_to_user_response import FinishAddWebauthnToUserResponse
from autharmor_python.models.finish_new_webauthn_user_registration_request import FinishNewWebauthnUserRegistrationRequest
from autharmor_python.models.finish_new_webauthn_user_registration_response import FinishNewWebauthnUserRegistrationResponse
from autharmor_python.models.start_add_webauthn_to_user_request import StartAddWebauthnToUserRequest
from autharmor_python.models.start_add_webauthn_to_user_response import StartAddWebauthnToUserResponse
from autharmor_python.models.start_new_webauthn_user_registration_request import StartNewWebauthnUserRegistrationRequest
from autharmor_python.models.start_new_webauthn_user_registration_response import StartNewWebauthnUserRegistrationResponse
from autharmor_python.models.validate_webauthn_registration_request import ValidateWebauthnRegistrationRequest
from autharmor_python.models.validate_webauthn_registration_response import ValidateWebauthnRegistrationResponse

from autharmor_python.api_client import ApiClient
from autharmor_python.api_response import ApiResponse
from autharmor_python.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UserRegistrationsWebAuthnApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_finish_post(self, registration_id : StrictStr, finish_new_webauthn_user_registration_request : Optional[FinishNewWebauthnUserRegistrationRequest] = None, **kwargs) -> FinishNewWebauthnUserRegistrationResponse:  # noqa: E501
        """  Finish WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_finish_post(registration_id, finish_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param finish_new_webauthn_user_registration_request:
        :type finish_new_webauthn_user_registration_request: FinishNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FinishNewWebauthnUserRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_registration_id_finish_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(registration_id, finish_new_webauthn_user_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(self, registration_id : StrictStr, finish_new_webauthn_user_registration_request : Optional[FinishNewWebauthnUserRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Finish WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_finish_post_with_http_info(registration_id, finish_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param finish_new_webauthn_user_registration_request:
        :type finish_new_webauthn_user_registration_request: FinishNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FinishNewWebauthnUserRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'finish_new_webauthn_user_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_registration_id_finish_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['finish_new_webauthn_user_registration_request'] is not None:
            _body_params = _params['finish_new_webauthn_user_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "FinishNewWebauthnUserRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/{registration_id}/finish', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_validate_post(self, registration_id : StrictStr, validate_webauthn_registration_request : Optional[ValidateWebauthnRegistrationRequest] = None, **kwargs) -> ValidateWebauthnRegistrationResponse:  # noqa: E501
        """  Validate User Registration for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_validate_post(registration_id, validate_webauthn_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_webauthn_registration_request:
        :type validate_webauthn_registration_request: ValidateWebauthnRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateWebauthnRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_registration_id_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(registration_id, validate_webauthn_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(self, registration_id : StrictStr, validate_webauthn_registration_request : Optional[ValidateWebauthnRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Validate User Registration for WebAuthn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_registration_id_validate_post_with_http_info(registration_id, validate_webauthn_registration_request, async_req=True)
        >>> result = thread.get()

        :param registration_id: (required)
        :type registration_id: str
        :param validate_webauthn_registration_request:
        :type validate_webauthn_registration_request: ValidateWebauthnRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateWebauthnRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registration_id',
            'validate_webauthn_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_registration_id_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['validate_webauthn_registration_request'] is not None:
            _body_params = _params['validate_webauthn_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ValidateWebauthnRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/{registration_id}/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_registrations_webauthn_start_post(self, start_new_webauthn_user_registration_request : Optional[StartNewWebauthnUserRegistrationRequest] = None, **kwargs) -> StartNewWebauthnUserRegistrationResponse:  # noqa: E501
        """  Start WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_start_post(start_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_new_webauthn_user_registration_request:
        :type start_new_webauthn_user_registration_request: StartNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartNewWebauthnUserRegistrationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_registrations_webauthn_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_registrations_webauthn_start_post_with_http_info(start_new_webauthn_user_registration_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_registrations_webauthn_start_post_with_http_info(self, start_new_webauthn_user_registration_request : Optional[StartNewWebauthnUserRegistrationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start WebAuthn Registration for new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_registrations_webauthn_start_post_with_http_info(start_new_webauthn_user_registration_request, async_req=True)
        >>> result = thread.get()

        :param start_new_webauthn_user_registration_request:
        :type start_new_webauthn_user_registration_request: StartNewWebauthnUserRegistrationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartNewWebauthnUserRegistrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start_new_webauthn_user_registration_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_registrations_webauthn_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_new_webauthn_user_registration_request'] is not None:
            _body_params = _params['start_new_webauthn_user_registration_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartNewWebauthnUserRegistrationResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/registrations/webauthn/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_registration_id_finish_post(self, user_id : StrictStr, registration_id : StrictStr, username : Optional[StrictStr] = None, finish_add_webauthn_to_user_request : Optional[FinishAddWebauthnToUserRequest] = None, **kwargs) -> FinishAddWebauthnToUserResponse:  # noqa: E501
        """  Finish WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_registration_id_finish_post(user_id, registration_id, username, finish_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param registration_id: (required)
        :type registration_id: str
        :param username:
        :type username: str
        :param finish_add_webauthn_to_user_request:
        :type finish_add_webauthn_to_user_request: FinishAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FinishAddWebauthnToUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(user_id, registration_id, username, finish_add_webauthn_to_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(self, user_id : StrictStr, registration_id : StrictStr, username : Optional[StrictStr] = None, finish_add_webauthn_to_user_request : Optional[FinishAddWebauthnToUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Finish WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_registration_id_finish_post_with_http_info(user_id, registration_id, username, finish_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param registration_id: (required)
        :type registration_id: str
        :param username:
        :type username: str
        :param finish_add_webauthn_to_user_request:
        :type finish_add_webauthn_to_user_request: FinishAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FinishAddWebauthnToUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'registration_id',
            'username',
            'finish_add_webauthn_to_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_webauthn_registration_id_finish_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['registration_id']:
            _path_params['registration_id'] = _params['registration_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['finish_add_webauthn_to_user_request'] is not None:
            _body_params = _params['finish_add_webauthn_to_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "FinishAddWebauthnToUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/webauthn/{registration_id}/finish', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_start_post(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_add_webauthn_to_user_request : Optional[StartAddWebauthnToUserRequest] = None, **kwargs) -> StartAddWebauthnToUserResponse:  # noqa: E501
        """  Start WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_start_post(user_id, username, start_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_add_webauthn_to_user_request:
        :type start_add_webauthn_to_user_request: StartAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StartAddWebauthnToUserResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v4_users_user_id_registrations_webauthn_start_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v4_users_user_id_registrations_webauthn_start_post_with_http_info(user_id, username, start_add_webauthn_to_user_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v4_users_user_id_registrations_webauthn_start_post_with_http_info(self, user_id : StrictStr, username : Optional[StrictStr] = None, start_add_webauthn_to_user_request : Optional[StartAddWebauthnToUserRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """  Start WebAuthn Registration for existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_users_user_id_registrations_webauthn_start_post_with_http_info(user_id, username, start_add_webauthn_to_user_request, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: str
        :param username:
        :type username: str
        :param start_add_webauthn_to_user_request:
        :type start_add_webauthn_to_user_request: StartAddWebauthnToUserRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StartAddWebauthnToUserResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'username',
            'start_add_webauthn_to_user_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_users_user_id_registrations_webauthn_start_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['start_add_webauthn_to_user_request'] is not None:
            _body_params = _params['start_add_webauthn_to_user_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "StartAddWebauthnToUserResponse",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/v4/users/{user_id}/registrations/webauthn/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
