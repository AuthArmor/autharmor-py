# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from autharmor_python.models.fido2_registration_data import Fido2RegistrationData

class FinishNewWebauthnUserRegistrationRequest(BaseModel):
    """
    FinishNewWebauthnUserRegistrationRequest
    """
    aa_sig: constr(strict=True, min_length=1) = Field(...)
    authenticator_response_data: Fido2RegistrationData = Field(...)
    webauthn_client_id: Optional[StrictStr] = None
    __properties = ["aa_sig", "authenticator_response_data", "webauthn_client_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FinishNewWebauthnUserRegistrationRequest:
        """Create an instance of FinishNewWebauthnUserRegistrationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of authenticator_response_data
        if self.authenticator_response_data:
            _dict['authenticator_response_data'] = self.authenticator_response_data.to_dict()
        # set to None if webauthn_client_id (nullable) is None
        # and __fields_set__ contains the field
        if self.webauthn_client_id is None and "webauthn_client_id" in self.__fields_set__:
            _dict['webauthn_client_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FinishNewWebauthnUserRegistrationRequest:
        """Create an instance of FinishNewWebauthnUserRegistrationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FinishNewWebauthnUserRegistrationRequest.parse_obj(obj)

        _obj = FinishNewWebauthnUserRegistrationRequest.parse_obj({
            "aa_sig": obj.get("aa_sig"),
            "authenticator_response_data": Fido2RegistrationData.from_dict(obj.get("authenticator_response_data")) if obj.get("authenticator_response_data") is not None else None,
            "webauthn_client_id": obj.get("webauthn_client_id")
        })
        return _obj


