# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from autharmor_python.models.user import User
from autharmor_python.models.users_response_page_info import UsersResponsePageInfo

class GetUsersResponse(BaseModel):
    """
    GetUsersResponse
    """
    user_records: Optional[conlist(User)] = None
    page_info: Optional[UsersResponsePageInfo] = None
    __properties = ["user_records", "page_info"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetUsersResponse:
        """Create an instance of GetUsersResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in user_records (list)
        _items = []
        if self.user_records:
            for _item in self.user_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['user_records'] = _items
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['page_info'] = self.page_info.to_dict()
        # set to None if user_records (nullable) is None
        # and __fields_set__ contains the field
        if self.user_records is None and "user_records" in self.__fields_set__:
            _dict['user_records'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetUsersResponse:
        """Create an instance of GetUsersResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetUsersResponse.parse_obj(obj)

        _obj = GetUsersResponse.parse_obj({
            "user_records": [User.from_dict(_item) for _item in obj.get("user_records")] if obj.get("user_records") is not None else None,
            "page_info": UsersResponsePageInfo.from_dict(obj.get("page_info")) if obj.get("page_info") is not None else None
        })
        return _obj


