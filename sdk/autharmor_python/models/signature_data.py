# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from autharmor_python.models.auth_method_use_type_response import AuthMethodUseTypeResponse
from autharmor_python.models.auth_methods import AuthMethods
from autharmor_python.models.hash_types import HashTypes
from autharmor_python.models.signing_method import SigningMethod

class SignatureData(BaseModel):
    """
    SignatureData
    """
    hash_value: Optional[StrictStr] = None
    signature_data: Optional[StrictStr] = None
    auth_method_usetype: Optional[AuthMethodUseTypeResponse] = None
    signing_method: Optional[SigningMethod] = None
    auth_method: Optional[AuthMethods] = None
    hash_method: Optional[HashTypes] = None
    __properties = ["hash_value", "signature_data", "auth_method_usetype", "signing_method", "auth_method", "hash_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignatureData:
        """Create an instance of SignatureData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if hash_value (nullable) is None
        # and __fields_set__ contains the field
        if self.hash_value is None and "hash_value" in self.__fields_set__:
            _dict['hash_value'] = None

        # set to None if signature_data (nullable) is None
        # and __fields_set__ contains the field
        if self.signature_data is None and "signature_data" in self.__fields_set__:
            _dict['signature_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignatureData:
        """Create an instance of SignatureData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignatureData.parse_obj(obj)

        _obj = SignatureData.parse_obj({
            "hash_value": obj.get("hash_value"),
            "signature_data": obj.get("signature_data"),
            "auth_method_usetype": obj.get("auth_method_usetype"),
            "signing_method": obj.get("signing_method"),
            "auth_method": obj.get("auth_method"),
            "hash_method": obj.get("hash_method")
        })
        return _obj


