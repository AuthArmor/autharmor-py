# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr
from autharmor_python.models.validate_auth_response_details import ValidateAuthResponseDetails

class ValidateAuthResponse(BaseModel):
    """
    ValidateAuthResponse
    """
    auth_request_status_id: Optional[StrictInt] = None
    auth_request_status_name: Optional[StrictStr] = None
    validate_auth_response_details: Optional[ValidateAuthResponseDetails] = None
    __properties = ["auth_request_status_id", "auth_request_status_name", "validate_auth_response_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidateAuthResponse:
        """Create an instance of ValidateAuthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of validate_auth_response_details
        if self.validate_auth_response_details:
            _dict['validate_auth_response_details'] = self.validate_auth_response_details.to_dict()
        # set to None if auth_request_status_name (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_request_status_name is None and "auth_request_status_name" in self.__fields_set__:
            _dict['auth_request_status_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidateAuthResponse:
        """Create an instance of ValidateAuthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidateAuthResponse.parse_obj(obj)

        _obj = ValidateAuthResponse.parse_obj({
            "auth_request_status_id": obj.get("auth_request_status_id"),
            "auth_request_status_name": obj.get("auth_request_status_name"),
            "validate_auth_response_details": ValidateAuthResponseDetails.from_dict(obj.get("validate_auth_response_details")) if obj.get("validate_auth_response_details") is not None else None
        })
        return _obj


