# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class GetRegistrationInfoResponse(BaseModel):
    """
    GetRegistrationInfoResponse
    """
    registration_status_name: Optional[StrictStr] = None
    registration_status_code: Optional[StrictInt] = None
    auth_method: Optional[StrictStr] = None
    __properties = ["registration_status_name", "registration_status_code", "auth_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRegistrationInfoResponse:
        """Create an instance of GetRegistrationInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if registration_status_name (nullable) is None
        # and __fields_set__ contains the field
        if self.registration_status_name is None and "registration_status_name" in self.__fields_set__:
            _dict['registration_status_name'] = None

        # set to None if auth_method (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_method is None and "auth_method" in self.__fields_set__:
            _dict['auth_method'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRegistrationInfoResponse:
        """Create an instance of GetRegistrationInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRegistrationInfoResponse.parse_obj(obj)

        _obj = GetRegistrationInfoResponse.parse_obj({
            "registration_status_name": obj.get("registration_status_name"),
            "registration_status_code": obj.get("registration_status_code"),
            "auth_method": obj.get("auth_method")
        })
        return _obj


