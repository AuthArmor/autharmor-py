# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, StrictStr
from autharmor_python.models.signature_data import SignatureData
from autharmor_python.models.signed_message_type import SignedMessageType

class SecureSignedMessage(BaseModel):
    """
    SecureSignedMessage
    """
    signed_data: Optional[StrictStr] = None
    signature_data: Optional[SignatureData] = None
    signed_data_type: Optional[SignedMessageType] = None
    signature_validation_details: Optional[Any] = None
    __properties = ["signed_data", "signature_data", "signed_data_type", "signature_validation_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SecureSignedMessage:
        """Create an instance of SecureSignedMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of signature_data
        if self.signature_data:
            _dict['signature_data'] = self.signature_data.to_dict()
        # set to None if signed_data (nullable) is None
        # and __fields_set__ contains the field
        if self.signed_data is None and "signed_data" in self.__fields_set__:
            _dict['signed_data'] = None

        # set to None if signature_validation_details (nullable) is None
        # and __fields_set__ contains the field
        if self.signature_validation_details is None and "signature_validation_details" in self.__fields_set__:
            _dict['signature_validation_details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SecureSignedMessage:
        """Create an instance of SecureSignedMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SecureSignedMessage.parse_obj(obj)

        _obj = SecureSignedMessage.parse_obj({
            "signed_data": obj.get("signed_data"),
            "signature_data": SignatureData.from_dict(obj.get("signature_data")) if obj.get("signature_data") is not None else None,
            "signed_data_type": obj.get("signed_data_type"),
            "signature_validation_details": obj.get("signature_validation_details")
        })
        return _obj


