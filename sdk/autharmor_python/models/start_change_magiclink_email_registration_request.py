# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr

class StartChangeMagiclinkEmailRegistrationRequest(BaseModel):
    """
    StartChangeMagiclinkEmailRegistrationRequest
    """
    new_email_address: Optional[StrictStr] = None
    timeout_in_seconds: Optional[StrictInt] = None
    registration_redirect_url: Optional[StrictStr] = None
    action_name: Optional[StrictStr] = None
    short_msg: Optional[StrictStr] = None
    context_data: Optional[Dict[str, StrictStr]] = None
    __properties = ["new_email_address", "timeout_in_seconds", "registration_redirect_url", "action_name", "short_msg", "context_data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartChangeMagiclinkEmailRegistrationRequest:
        """Create an instance of StartChangeMagiclinkEmailRegistrationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if new_email_address (nullable) is None
        # and __fields_set__ contains the field
        if self.new_email_address is None and "new_email_address" in self.__fields_set__:
            _dict['new_email_address'] = None

        # set to None if timeout_in_seconds (nullable) is None
        # and __fields_set__ contains the field
        if self.timeout_in_seconds is None and "timeout_in_seconds" in self.__fields_set__:
            _dict['timeout_in_seconds'] = None

        # set to None if registration_redirect_url (nullable) is None
        # and __fields_set__ contains the field
        if self.registration_redirect_url is None and "registration_redirect_url" in self.__fields_set__:
            _dict['registration_redirect_url'] = None

        # set to None if action_name (nullable) is None
        # and __fields_set__ contains the field
        if self.action_name is None and "action_name" in self.__fields_set__:
            _dict['action_name'] = None

        # set to None if short_msg (nullable) is None
        # and __fields_set__ contains the field
        if self.short_msg is None and "short_msg" in self.__fields_set__:
            _dict['short_msg'] = None

        # set to None if context_data (nullable) is None
        # and __fields_set__ contains the field
        if self.context_data is None and "context_data" in self.__fields_set__:
            _dict['context_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartChangeMagiclinkEmailRegistrationRequest:
        """Create an instance of StartChangeMagiclinkEmailRegistrationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartChangeMagiclinkEmailRegistrationRequest.parse_obj(obj)

        _obj = StartChangeMagiclinkEmailRegistrationRequest.parse_obj({
            "new_email_address": obj.get("new_email_address"),
            "timeout_in_seconds": obj.get("timeout_in_seconds"),
            "registration_redirect_url": obj.get("registration_redirect_url"),
            "action_name": obj.get("action_name"),
            "short_msg": obj.get("short_msg"),
            "context_data": obj.get("context_data")
        })
        return _obj


