# coding: utf-8

"""
    Autharmor

    Autharmor provides A Suite of Authentication and Authorization tools to enhance security and accelerate your business.

    The version of the OpenAPI document: v4
    Contact: support@autharmor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class StartAuthenticatorAuthResponse(BaseModel):
    """
    StartAuthenticatorAuthResponse
    """
    auth_validation_token: Optional[StrictStr] = None
    auth_request_id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    visual_verify_value: Optional[StrictStr] = None
    response_code: Optional[StrictInt] = None
    response_message: Optional[StrictStr] = None
    qr_code_data: Optional[StrictStr] = None
    push_message_sent: Optional[StrictBool] = None
    timeout_in_seconds: Optional[StrictInt] = None
    timeout_utc_datetime: Optional[datetime] = None
    __properties = ["auth_validation_token", "auth_request_id", "user_id", "visual_verify_value", "response_code", "response_message", "qr_code_data", "push_message_sent", "timeout_in_seconds", "timeout_utc_datetime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartAuthenticatorAuthResponse:
        """Create an instance of StartAuthenticatorAuthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if auth_validation_token (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_validation_token is None and "auth_validation_token" in self.__fields_set__:
            _dict['auth_validation_token'] = None

        # set to None if visual_verify_value (nullable) is None
        # and __fields_set__ contains the field
        if self.visual_verify_value is None and "visual_verify_value" in self.__fields_set__:
            _dict['visual_verify_value'] = None

        # set to None if response_message (nullable) is None
        # and __fields_set__ contains the field
        if self.response_message is None and "response_message" in self.__fields_set__:
            _dict['response_message'] = None

        # set to None if qr_code_data (nullable) is None
        # and __fields_set__ contains the field
        if self.qr_code_data is None and "qr_code_data" in self.__fields_set__:
            _dict['qr_code_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartAuthenticatorAuthResponse:
        """Create an instance of StartAuthenticatorAuthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartAuthenticatorAuthResponse.parse_obj(obj)

        _obj = StartAuthenticatorAuthResponse.parse_obj({
            "auth_validation_token": obj.get("auth_validation_token"),
            "auth_request_id": obj.get("auth_request_id"),
            "user_id": obj.get("user_id"),
            "visual_verify_value": obj.get("visual_verify_value"),
            "response_code": obj.get("response_code"),
            "response_message": obj.get("response_message"),
            "qr_code_data": obj.get("qr_code_data"),
            "push_message_sent": obj.get("push_message_sent"),
            "timeout_in_seconds": obj.get("timeout_in_seconds"),
            "timeout_utc_datetime": obj.get("timeout_utc_datetime")
        })
        return _obj


