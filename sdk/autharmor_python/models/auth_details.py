# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from autharmor_python.models.auth_response_details import AuthResponseDetails
from autharmor_python.models.request_details import RequestDetails

class AuthDetails(BaseModel):
    """
    AuthDetails
    """
    request_details: Optional[RequestDetails] = None
    response_details: Optional[AuthResponseDetails] = None
    __properties = ["request_details", "response_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthDetails:
        """Create an instance of AuthDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request_details
        if self.request_details:
            _dict['request_details'] = self.request_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_details
        if self.response_details:
            _dict['response_details'] = self.response_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthDetails:
        """Create an instance of AuthDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthDetails.parse_obj(obj)

        _obj = AuthDetails.parse_obj({
            "request_details": RequestDetails.from_dict(obj.get("request_details")) if obj.get("request_details") is not None else None,
            "response_details": AuthResponseDetails.from_dict(obj.get("response_details")) if obj.get("response_details") is not None else None
        })
        return _obj


