# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class Fido2RegistrationData(BaseModel):
    """
    Fido2RegistrationData
    """
    id: Optional[StrictStr] = None
    attestation_object: Optional[StrictStr] = None
    client_data: Optional[StrictStr] = None
    __properties = ["id", "attestation_object", "client_data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Fido2RegistrationData:
        """Create an instance of Fido2RegistrationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if attestation_object (nullable) is None
        # and __fields_set__ contains the field
        if self.attestation_object is None and "attestation_object" in self.__fields_set__:
            _dict['attestation_object'] = None

        # set to None if client_data (nullable) is None
        # and __fields_set__ contains the field
        if self.client_data is None and "client_data" in self.__fields_set__:
            _dict['client_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Fido2RegistrationData:
        """Create an instance of Fido2RegistrationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Fido2RegistrationData.parse_obj(obj)

        _obj = Fido2RegistrationData.parse_obj({
            "id": obj.get("id"),
            "attestation_object": obj.get("attestation_object"),
            "client_data": obj.get("client_data")
        })
        return _obj


