# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field
from autharmor_python.models.auth_methods import AuthMethods
from autharmor_python.models.auth_profile_details import AuthProfileDetails
from autharmor_python.models.location_data import LocationData

class RequestDetails(BaseModel):
    """
    RequestDetails
    """
    var_date: Optional[datetime] = Field(None, alias="date")
    auth_profile_details: Optional[AuthProfileDetails] = None
    origin_location_data: Optional[LocationData] = None
    auth_method: Optional[AuthMethods] = None
    __properties = ["date", "auth_profile_details", "origin_location_data", "auth_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestDetails:
        """Create an instance of RequestDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of auth_profile_details
        if self.auth_profile_details:
            _dict['auth_profile_details'] = self.auth_profile_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_location_data
        if self.origin_location_data:
            _dict['origin_location_data'] = self.origin_location_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestDetails:
        """Create an instance of RequestDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestDetails.parse_obj(obj)

        _obj = RequestDetails.parse_obj({
            "var_date": obj.get("date"),
            "auth_profile_details": AuthProfileDetails.from_dict(obj.get("auth_profile_details")) if obj.get("auth_profile_details") is not None else None,
            "origin_location_data": LocationData.from_dict(obj.get("origin_location_data")) if obj.get("origin_location_data") is not None else None,
            "auth_method": obj.get("auth_method")
        })
        return _obj


