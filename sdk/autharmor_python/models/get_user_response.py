# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from autharmor_python.models.enrolled_auth_method import EnrolledAuthMethod

class GetUserResponse(BaseModel):
    """
    GetUserResponse
    """
    enrolled_auth_methods: Optional[conlist(EnrolledAuthMethod)] = None
    user_id: Optional[StrictStr] = None
    email_address: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    date_created: Optional[datetime] = None
    __properties = ["enrolled_auth_methods", "user_id", "email_address", "username", "date_created"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetUserResponse:
        """Create an instance of GetUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in enrolled_auth_methods (list)
        _items = []
        if self.enrolled_auth_methods:
            for _item in self.enrolled_auth_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['enrolled_auth_methods'] = _items
        # set to None if enrolled_auth_methods (nullable) is None
        # and __fields_set__ contains the field
        if self.enrolled_auth_methods is None and "enrolled_auth_methods" in self.__fields_set__:
            _dict['enrolled_auth_methods'] = None

        # set to None if email_address (nullable) is None
        # and __fields_set__ contains the field
        if self.email_address is None and "email_address" in self.__fields_set__:
            _dict['email_address'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetUserResponse:
        """Create an instance of GetUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetUserResponse.parse_obj(obj)

        _obj = GetUserResponse.parse_obj({
            "enrolled_auth_methods": [EnrolledAuthMethod.from_dict(_item) for _item in obj.get("enrolled_auth_methods")] if obj.get("enrolled_auth_methods") is not None else None,
            "user_id": obj.get("user_id"),
            "email_address": obj.get("email_address"),
            "username": obj.get("username"),
            "date_created": obj.get("date_created")
        })
        return _obj


