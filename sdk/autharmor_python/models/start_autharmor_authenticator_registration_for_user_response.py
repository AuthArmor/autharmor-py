# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr

class StartAutharmorAuthenticatorRegistrationForUserResponse(BaseModel):
    """
    StartAutharmorAuthenticatorRegistrationForUserResponse
    """
    username: Optional[StrictStr] = None
    registration_id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    date_expires: Optional[datetime] = None
    auth_method: Optional[StrictStr] = None
    qr_code_data: Optional[StrictStr] = None
    registration_validation_token: Optional[StrictStr] = None
    __properties = ["username", "registration_id", "user_id", "date_expires", "auth_method", "qr_code_data", "registration_validation_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartAutharmorAuthenticatorRegistrationForUserResponse:
        """Create an instance of StartAutharmorAuthenticatorRegistrationForUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        # set to None if auth_method (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_method is None and "auth_method" in self.__fields_set__:
            _dict['auth_method'] = None

        # set to None if qr_code_data (nullable) is None
        # and __fields_set__ contains the field
        if self.qr_code_data is None and "qr_code_data" in self.__fields_set__:
            _dict['qr_code_data'] = None

        # set to None if registration_validation_token (nullable) is None
        # and __fields_set__ contains the field
        if self.registration_validation_token is None and "registration_validation_token" in self.__fields_set__:
            _dict['registration_validation_token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartAutharmorAuthenticatorRegistrationForUserResponse:
        """Create an instance of StartAutharmorAuthenticatorRegistrationForUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartAutharmorAuthenticatorRegistrationForUserResponse.parse_obj(obj)

        _obj = StartAutharmorAuthenticatorRegistrationForUserResponse.parse_obj({
            "username": obj.get("username"),
            "registration_id": obj.get("registration_id"),
            "user_id": obj.get("user_id"),
            "date_expires": obj.get("date_expires"),
            "auth_method": obj.get("auth_method"),
            "qr_code_data": obj.get("qr_code_data"),
            "registration_validation_token": obj.get("registration_validation_token")
        })
        return _obj


