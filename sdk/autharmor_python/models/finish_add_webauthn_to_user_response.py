# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class FinishAddWebauthnToUserResponse(BaseModel):
    """
    FinishAddWebauthnToUserResponse
    """
    registration_validation_token: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties = ["registration_validation_token", "user_id", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FinishAddWebauthnToUserResponse:
        """Create an instance of FinishAddWebauthnToUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if registration_validation_token (nullable) is None
        # and __fields_set__ contains the field
        if self.registration_validation_token is None and "registration_validation_token" in self.__fields_set__:
            _dict['registration_validation_token'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FinishAddWebauthnToUserResponse:
        """Create an instance of FinishAddWebauthnToUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FinishAddWebauthnToUserResponse.parse_obj(obj)

        _obj = FinishAddWebauthnToUserResponse.parse_obj({
            "registration_validation_token": obj.get("registration_validation_token"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username")
        })
        return _obj


