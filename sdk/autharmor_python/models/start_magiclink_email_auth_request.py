# coding: utf-8

"""
    Autharmor

    Auth Armor - Auth Anywhere API

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr, constr
from autharmor_python.models.location_data import LocationData

class StartMagiclinkEmailAuthRequest(BaseModel):
    """
    StartMagiclinkEmailAuthRequest
    """
    user_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    timeout_in_seconds: Optional[StrictInt] = None
    origin_location_data: Optional[LocationData] = None
    action_name: Optional[constr(strict=True, max_length=32, min_length=2)] = None
    short_msg: Optional[StrictStr] = None
    auth_redirect_url: Optional[StrictStr] = None
    context_data: Optional[Dict[str, StrictStr]] = None
    ip_address: Optional[StrictStr] = None
    user_agent: Optional[StrictStr] = None
    __properties = ["user_id", "username", "timeout_in_seconds", "origin_location_data", "action_name", "short_msg", "auth_redirect_url", "context_data", "ip_address", "user_agent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartMagiclinkEmailAuthRequest:
        """Create an instance of StartMagiclinkEmailAuthRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of origin_location_data
        if self.origin_location_data:
            _dict['origin_location_data'] = self.origin_location_data.to_dict()
        # set to None if user_id (nullable) is None
        # and __fields_set__ contains the field
        if self.user_id is None and "user_id" in self.__fields_set__:
            _dict['user_id'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        # set to None if timeout_in_seconds (nullable) is None
        # and __fields_set__ contains the field
        if self.timeout_in_seconds is None and "timeout_in_seconds" in self.__fields_set__:
            _dict['timeout_in_seconds'] = None

        # set to None if action_name (nullable) is None
        # and __fields_set__ contains the field
        if self.action_name is None and "action_name" in self.__fields_set__:
            _dict['action_name'] = None

        # set to None if short_msg (nullable) is None
        # and __fields_set__ contains the field
        if self.short_msg is None and "short_msg" in self.__fields_set__:
            _dict['short_msg'] = None

        # set to None if auth_redirect_url (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_redirect_url is None and "auth_redirect_url" in self.__fields_set__:
            _dict['auth_redirect_url'] = None

        # set to None if context_data (nullable) is None
        # and __fields_set__ contains the field
        if self.context_data is None and "context_data" in self.__fields_set__:
            _dict['context_data'] = None

        # set to None if ip_address (nullable) is None
        # and __fields_set__ contains the field
        if self.ip_address is None and "ip_address" in self.__fields_set__:
            _dict['ip_address'] = None

        # set to None if user_agent (nullable) is None
        # and __fields_set__ contains the field
        if self.user_agent is None and "user_agent" in self.__fields_set__:
            _dict['user_agent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartMagiclinkEmailAuthRequest:
        """Create an instance of StartMagiclinkEmailAuthRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartMagiclinkEmailAuthRequest.parse_obj(obj)

        _obj = StartMagiclinkEmailAuthRequest.parse_obj({
            "user_id": obj.get("user_id"),
            "username": obj.get("username"),
            "timeout_in_seconds": obj.get("timeout_in_seconds"),
            "origin_location_data": LocationData.from_dict(obj.get("origin_location_data")) if obj.get("origin_location_data") is not None else None,
            "action_name": obj.get("action_name"),
            "short_msg": obj.get("short_msg"),
            "auth_redirect_url": obj.get("auth_redirect_url"),
            "context_data": obj.get("context_data"),
            "ip_address": obj.get("ip_address"),
            "user_agent": obj.get("user_agent")
        })
        return _obj


